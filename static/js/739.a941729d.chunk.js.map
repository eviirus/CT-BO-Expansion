{"version":3,"file":"static/js/739.a941729d.chunk.js","mappings":"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","sources":["constants/urlRegex.js","hooks/useTextChange.jsx","components/code-display/CodeDisplay.jsx","utils/ShowMessage.jsx","components/buttons/RemoveButton.jsx","hooks/useSetFirstType.jsx","components/widgets/static-widget-generator/widget-content/title-content/TitleContent.jsx","components/widgets/static-widget-generator/widget-content/description-content/DescriptionContent.jsx","components/widgets/static-widget-generator/widget-content/button-content/ButtonContent.jsx","components/widgets/static-widget-generator/widget-content/image-content/ImageContent.jsx","components/widgets/static-widget-generator/WidgetContent.jsx","routes/widgets/static-widget-generator/CardsWithOffers.jsx","hooks/useTypeChange.jsx","constants/alertMessages.js","hooks/useRows.jsx"],"sourcesContent":["export const urlRegex = /^(https?):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\r\n","import { useCallback } from \"react\";\r\n\r\nexport const useTextChange = ({ setText, setErrors, field = \"text\" }) => {\r\n  const handleTextChange = useCallback(\r\n    (key, textValue) => {\r\n      setText((prev) => ({ ...prev, [key]: textValue }));\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [field]: {\r\n          ...(prev.text || {}),\r\n          [key]: \"\",\r\n        },\r\n      }));\r\n    },\r\n    [setText, setErrors]\r\n  );\r\n\r\n  return { handleTextChange };\r\n};\r\n","import { Input, Tooltip, Button, message } from \"antd\";\r\nimport { CopyOutlined } from \"@ant-design/icons\";\r\nimport { useState } from \"react\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nexport default function CodeDisplay({ content, scrollRef }) {\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const handleCopy = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(content);\r\n      setCopied(true);\r\n      message.success(\"Copied to clipboard!\");\r\n      setTimeout(() => setCopied(false), 2000);\r\n    } catch (err) {\r\n      message.error(\"Failed to copy!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section\r\n      ref={scrollRef}\r\n      className=\"code-display basic-col\"\r\n      id=\"codeDisplay\"\r\n      style={{ marginTop: \"20px\", width: \"100%\" }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          marginBottom: \"8px\",\r\n        }}\r\n      >\r\n        <h2 className=\"regular24\">Generated code</h2>\r\n        <Tooltip title={copied ? \"Copied!\" : \"Copy to clipboard\"}>\r\n          <Button\r\n            icon={<CopyOutlined />}\r\n            onClick={handleCopy}\r\n            type=\"text\"\r\n            size=\"large\"\r\n          />\r\n        </Tooltip>\r\n      </div>\r\n\r\n      <TextArea value={content} style={{ resize: \"none\" }} rows={6} readOnly />\r\n    </section>\r\n  );\r\n}\r\n","import { message } from \"antd\";\r\n\r\nexport const ShowMessage = () => {\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n\r\n  const showError = (msg) => {\r\n    messageApi.open({\r\n      type: \"error\",\r\n      content: msg,\r\n    });\r\n  };\r\n\r\n  const showSuccess = (msg) => {\r\n    messageApi.open({\r\n      type: \"success\",\r\n      content: msg,\r\n    });\r\n  };\r\n\r\n  const showInfo = (msg) => {\r\n    messageApi.open({\r\n      type: \"info\",\r\n      content: msg,\r\n    });\r\n  };\r\n\r\n  return {\r\n    contextHolder,\r\n    showError,\r\n    showSuccess,\r\n    showInfo,\r\n  };\r\n};\r\n","import { Button, Tooltip } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\n\r\nconst RemoveButton = ({ rowKey, removeRow }) => {\r\n  return (\r\n    <Tooltip title=\"Remove row\" placement=\"left\">\r\n      <Button\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => removeRow(rowKey)}\r\n        color=\"red\"\r\n        variant=\"outlined\"\r\n      ></Button>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default RemoveButton;\r\n","import { useEffect } from \"react\";\r\n\r\nexport const useSetFirstType = ({\r\n  types,\r\n  rowKey,\r\n  selectedType,\r\n  setSelectedType,\r\n  handleTypeChange,\r\n}) => {\r\n  useEffect(() => {\r\n    if (types.length > 0 && !selectedType[rowKey]) {\r\n      const firstType = types[0].value;\r\n      setSelectedType((prev) => ({ ...prev, [rowKey]: firstType }));\r\n      handleTypeChange(rowKey, firstType);\r\n    }\r\n  }, [types, rowKey, selectedType, setSelectedType, handleTypeChange]);\r\n};\r\n","import { forwardRef, useImperativeHandle, useState } from \"react\";\r\nimport { useTypeChange } from \"../../../../../hooks/useTypeChange\";\r\nimport { useTextChange } from \"../../../../../hooks/useTextChange\";\r\nimport { Select, Input } from \"antd\";\r\nimport { useSetFirstType } from \"../../../../../hooks/useSetFirstType\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst TitleContent = forwardRef(({ content, rowKey }, ref) => {\r\n  const [selectedType, setSelectedType] = useState({});\r\n  const [selectedClass, setSelectedClass] = useState({});\r\n  const [classes, setClasses] = useState({});\r\n  const [text, setText] = useState({});\r\n  const [errors, setErrors] = useState({ type: {}, text: {} });\r\n\r\n  const types = content.map((item) => ({\r\n    label: item.type,\r\n    value: item.type,\r\n  }));\r\n\r\n  const { handleTypeChange } = useTypeChange({\r\n    content,\r\n    setSelectedType,\r\n    setErrors,\r\n    setClasses,\r\n  });\r\n\r\n  const { handleTextChange } = useTextChange({\r\n    setText,\r\n    setErrors,\r\n  });\r\n\r\n  useSetFirstType({\r\n    types,\r\n    rowKey,\r\n    selectedType,\r\n    setSelectedType,\r\n    handleTypeChange,\r\n  });\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    validate: () => {\r\n      const newError = { type: {}, text: {} };\r\n\r\n      if (!selectedType[rowKey]) {\r\n        newError.type[rowKey] = \"Title type is required\";\r\n      }\r\n\r\n      if (!text[rowKey]) {\r\n        newError.text[rowKey] = \"Title content is required\";\r\n      }\r\n\r\n      setErrors(newError);\r\n      return (\r\n        Object.keys(newError.type || {}).length === 0 &&\r\n        Object.keys(newError.text || {}).length === 0\r\n      );\r\n    },\r\n\r\n    getValues: () => {\r\n      const values = {};\r\n\r\n      values[rowKey] = {\r\n        type: selectedType[rowKey],\r\n        class: selectedClass[rowKey],\r\n        text: text[rowKey].trim(),\r\n      };\r\n      return values;\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <section className=\"title-content\" style={{ marginBottom: \"10px\" }}>\r\n      <div className=\"basic-row\">\r\n        <div className=\"col-gap-only\">\r\n          <label htmlFor={`titleType-${rowKey}`}>Title type</label>\r\n          <Select\r\n            id={`titleType-${rowKey}`}\r\n            style={{ width: \"150px\" }}\r\n            allowClear\r\n            options={types}\r\n            onChange={(value) => handleTypeChange(rowKey, value)}\r\n            value={selectedType[rowKey] || null}\r\n          />\r\n          {errors.type[rowKey] && (\r\n            <div className=\"error\">{errors.type[rowKey]}</div>\r\n          )}\r\n        </div>\r\n        <div className=\"col-gap-only\">\r\n          <label htmlFor={`titleClass-${rowKey}`}>Title class</label>\r\n          <Select\r\n            id={`titleClass-${rowKey}`}\r\n            style={{ width: \"150px\" }}\r\n            allowClear\r\n            options={classes[rowKey]}\r\n            disabled={\r\n              !selectedType[rowKey] ||\r\n              !classes[rowKey] ||\r\n              classes[rowKey].length === 0\r\n            }\r\n            onChange={(value) =>\r\n              setSelectedClass((prev) => ({ ...prev, [rowKey]: value }))\r\n            }\r\n            value={selectedClass[rowKey] || null}\r\n          />\r\n        </div>\r\n        <div className=\"basic-col\">\r\n          <label htmlFor={`titleContent-${rowKey}`}>Title content</label>\r\n          <TextArea\r\n            id={`titleContent-${rowKey}`}\r\n            disabled={!selectedType[rowKey]}\r\n            rows={1}\r\n            style={{ resize: \"none\" }}\r\n            onChange={(e) => handleTextChange(rowKey, e.target.value.trim())}\r\n          ></TextArea>\r\n          {errors.text[rowKey] && selectedType[rowKey] && (\r\n            <div className=\"error\">{errors.text[rowKey]}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n});\r\n\r\nexport default TitleContent;\r\n","import { forwardRef, useImperativeHandle, useState } from \"react\";\r\nimport { useTypeChange } from \"../../../../../hooks/useTypeChange\";\r\nimport { useTextChange } from \"../../../../../hooks/useTextChange\";\r\nimport { Select, Input } from \"antd\";\r\nimport { useSetFirstType } from \"../../../../../hooks/useSetFirstType\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst DescriptionContent = forwardRef(({ content, rowKey }, ref) => {\r\n  const [selectedType, setSelectedType] = useState({});\r\n  const [selectedClass, setSelectedClass] = useState({});\r\n  const [classes, setClasses] = useState({});\r\n  const [text, setText] = useState({});\r\n  const [errors, setErrors] = useState({ type: {}, text: {} });\r\n\r\n  const types = content.map((item) => ({\r\n    label: item.type,\r\n    value: item.type,\r\n  }));\r\n\r\n  const { handleTypeChange } = useTypeChange({\r\n    content,\r\n    setSelectedType,\r\n    setErrors,\r\n    setClasses,\r\n  });\r\n\r\n  const { handleTextChange } = useTextChange({\r\n    setText,\r\n    setErrors,\r\n  });\r\n\r\n  useSetFirstType({\r\n    types,\r\n    rowKey,\r\n    selectedType,\r\n    setSelectedType,\r\n    handleTypeChange,\r\n  });\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    validate: () => {\r\n      const newError = { type: {}, text: {} };\r\n\r\n      if (!selectedType[rowKey]) {\r\n        newError.type[rowKey] = \"Description type is required\";\r\n      }\r\n\r\n      if (!text[rowKey]) {\r\n        newError.text[rowKey] = \"Description content is required\";\r\n      }\r\n\r\n      setErrors(newError);\r\n      return (\r\n        Object.keys(newError.type || {}).length === 0 &&\r\n        Object.keys(newError.text || {}).length === 0\r\n      );\r\n    },\r\n\r\n    getValues: () => {\r\n      const values = {};\r\n\r\n      values[rowKey] = {\r\n        type: selectedType[rowKey],\r\n        class: selectedClass[rowKey],\r\n        text: text[rowKey].trim(),\r\n      };\r\n      return values;\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <section className=\"description-content\" style={{ marginBottom: \"10px\" }}>\r\n      <div className=\"basic-row\">\r\n        <div className=\"col-gap-only\">\r\n          <label htmlFor={`descriptionType-${rowKey}`}>Description type</label>\r\n          <Select\r\n            id={`descriptionType-${rowKey}`}\r\n            style={{ width: \"150px\" }}\r\n            allowClear\r\n            options={types}\r\n            onChange={(value) => handleTypeChange(rowKey, value)}\r\n            value={selectedType[rowKey] || null}\r\n          />\r\n          {errors.type[rowKey] && (\r\n            <div className=\"error\">{errors.type[rowKey]}</div>\r\n          )}\r\n        </div>\r\n        <div className=\"col-gap-only\">\r\n          <label htmlFor={`descriptionClass-${rowKey}`}>\r\n            Description class\r\n          </label>\r\n          <Select\r\n            id={`descriptionClass-${rowKey}`}\r\n            style={{ width: \"150px\" }}\r\n            allowClear\r\n            options={classes[rowKey]}\r\n            disabled={\r\n              !selectedType[rowKey] ||\r\n              !classes[rowKey] ||\r\n              classes[rowKey].length === 0\r\n            }\r\n            onChange={(value) =>\r\n              setSelectedClass((prev) => ({ ...prev, [rowKey]: value }))\r\n            }\r\n            value={selectedClass[rowKey] || null}\r\n          />\r\n        </div>\r\n        <div className=\"basic-col\">\r\n          <label htmlFor={`descriptionContent-${rowKey}`}>\r\n            Description content\r\n          </label>\r\n          <TextArea\r\n            id={`descriptionContent-${rowKey}`}\r\n            disabled={!selectedType[rowKey]}\r\n            rows={1}\r\n            style={{ resize: \"none\" }}\r\n            onChange={(e) => handleTextChange(rowKey, e.target.value.trim())}\r\n          ></TextArea>\r\n          {errors.text[rowKey] && selectedType[rowKey] && (\r\n            <div className=\"error\">{errors.text[rowKey]}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n});\r\n\r\nexport default DescriptionContent;\r\n","import { forwardRef, useImperativeHandle, useState } from \"react\";\r\nimport { useTextChange } from \"../../../../../hooks/useTextChange\";\r\nimport { Input } from \"antd\";\r\nimport { urlRegex } from \"../../../../../constants/urlRegex\";\r\n\r\nconst ButtonContent = forwardRef(({ rowKey }, ref) => {\r\n  const [text, setText] = useState({});\r\n  const [link, setLink] = useState({});\r\n  const [errors, setErrors] = useState({ text: {}, link: {} });\r\n\r\n  const { handleTextChange } = useTextChange({\r\n    setText,\r\n    setErrors,\r\n  });\r\n\r\n  const { handleTextChange: handleLinkChange } = useTextChange({\r\n    setText: setLink,\r\n    setErrors,\r\n    field: \"link\",\r\n  });\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    validate: () => {\r\n      const newError = { text: {}, link: {} };\r\n\r\n      if (!text[rowKey]) {\r\n        newError.text[rowKey] = \"Button text is required\";\r\n      }\r\n\r\n      if (!link[rowKey]) {\r\n        newError.link[rowKey] = \"Button link is required\";\r\n      }\r\n\r\n      if (link[rowKey]) {\r\n        if (!urlRegex.test(link[rowKey])) {\r\n          newError.link[rowKey] = \"Please enter a valid URL\";\r\n        }\r\n      }\r\n\r\n      setErrors(newError);\r\n      return (\r\n        Object.keys(newError.text || {}).length === 0 &&\r\n        Object.keys(newError.link || {}).length === 0\r\n      );\r\n    },\r\n\r\n    getValues: () => {\r\n      const values = {};\r\n\r\n      values[rowKey] = {\r\n        text: text[rowKey].trim(),\r\n        link: link[rowKey].trim(),\r\n      };\r\n\r\n      return values;\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <section className=\"button-content\" style={{ marginBottom: \"10px\" }}>\r\n      <div className=\"basic-row\">\r\n        <div className=\"col-gap-only\">\r\n          <label htmlFor={`buttonText-${rowKey}`}>Button text</label>\r\n          <Input\r\n            id={`buttonText-${rowKey}`}\r\n            style={{ width: \"320px\" }}\r\n            allowClear\r\n            onChange={(e) => handleTextChange(rowKey, e.target.value.trim())}\r\n          />\r\n          {errors.text[rowKey] && (\r\n            <div className=\"error\">{errors.text[rowKey]}</div>\r\n          )}\r\n        </div>\r\n        <div className=\"basic-col\">\r\n          <label htmlFor={`buttonLink-${rowKey}`}>Button link</label>\r\n          <Input\r\n            id={`buttonLink-${rowKey}`}\r\n            allowClear\r\n            onChange={(e) => handleLinkChange(rowKey, e.target.value.trim())}\r\n          />\r\n          {errors.link[rowKey] && (\r\n            <div className=\"error\">{errors.link[rowKey]}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n});\r\n\r\nexport default ButtonContent;\r\n","import { forwardRef, useImperativeHandle, useState } from \"react\";\r\nimport { urlRegex } from \"../../../../../constants/urlRegex\";\r\nimport { Input } from \"antd\";\r\nimport { useTextChange } from \"../../../../../hooks/useTextChange\";\r\n\r\nconst ImageContent = forwardRef(({ rowKey }, ref) => {\r\n  const [link, setLink] = useState({});\r\n  const [errors, setErrors] = useState({ link: {} });\r\n\r\n  const { handleTextChange: handleLinkChange } = useTextChange({\r\n    setText: setLink,\r\n    setErrors,\r\n    field: \"link\",\r\n  });\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    validate: () => {\r\n      const newError = { text: {}, link: {} };\r\n\r\n      if (!link[rowKey]) {\r\n        newError.link[rowKey] = \"Button link is required\";\r\n      }\r\n\r\n      if (link[rowKey]) {\r\n        if (!urlRegex.test(link[rowKey])) {\r\n          newError.link[rowKey] = \"Please enter a valid URL\";\r\n        }\r\n      }\r\n\r\n      setErrors(newError);\r\n      return Object.keys(newError.link || {}).length === 0;\r\n    },\r\n\r\n    getValues: () => {\r\n      const values = {};\r\n\r\n      values[rowKey] = {\r\n        link: link[rowKey].trim(),\r\n      };\r\n\r\n      return values;\r\n    },\r\n  }));\r\n  return (\r\n    <section className=\"image-content\" style={{ marginBottom: \"10px\" }}>\r\n      <div className=\"basic-row\">\r\n        <div className=\"basic-col\">\r\n          <label htmlFor={`imageLink-${rowKey}`}>Background image link</label>\r\n          <Input\r\n            id={`imageLink-${rowKey}`}\r\n            allowClear\r\n            onChange={(e) => handleLinkChange(rowKey, e.target.value.trim())}\r\n          />\r\n          {errors.link[rowKey] && (\r\n            <div className=\"error\">{errors.link[rowKey]}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n});\r\n\r\nexport default ImageContent;\r\n","import { useRef, useImperativeHandle, forwardRef } from \"react\";\r\nimport { useRows } from \"../../../hooks/useRows\";\r\nimport { Collapse, Button } from \"antd\";\r\nimport RemoveButton from \"../../buttons/RemoveButton\";\r\nimport TitleContent from \"./widget-content/title-content/TitleContent\";\r\nimport DescriptionContent from \"./widget-content/description-content/DescriptionContent\";\r\nimport ButtonContent from \"./widget-content/button-content/ButtonContent\";\r\nimport ImageContent from \"./widget-content/image-content/ImageContent\";\r\n\r\nconst WidgetContent = forwardRef(({ content }, ref) => {\r\n  const { rows, addRow, removeRow } = useRows();\r\n  const titleContent = useRef({});\r\n  const descriptionContent = useRef({});\r\n  const buttonContent = useRef({});\r\n  const imageContent = useRef({});\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    validate: () => {\r\n      const contentRefs = [\r\n        titleContent,\r\n        descriptionContent,\r\n        buttonContent,\r\n        imageContent,\r\n      ];\r\n\r\n      for (const ref of contentRefs) {\r\n        for (const key in ref.current) {\r\n          if (ref.current[key]?.validate && !ref.current[key].validate()) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      return true;\r\n    },\r\n\r\n    getValues: () => {\r\n      const values = {};\r\n\r\n      for (const key of Object.keys(titleContent.current)) {\r\n        values[key] = {\r\n          title: titleContent.current[key]?.getValues?.() || {},\r\n          description: descriptionContent.current[key]?.getValues?.() || {},\r\n          button: buttonContent.current[key]?.getValues?.() || {},\r\n          image: imageContent.current[key]?.getValues?.() || {},\r\n        };\r\n      }\r\n\r\n      return values;\r\n    },\r\n  }));\r\n\r\n  const handleAddRow = () => {\r\n    addRow({ title: `Item ${rows.length + 1}` });\r\n  };\r\n\r\n  const renderContent = (rowKey) => {\r\n    const title = content.find((c) => c.rowType === \"title\");\r\n    const description = content.find((c) => c.rowType === \"description\");\r\n    const button = content.find((c) => c.rowType === \"button\");\r\n    const image = content.find((c) => c.rowType === \"image\");\r\n\r\n    return (\r\n      <>\r\n        {title && (\r\n          <TitleContent\r\n            ref={(el) => (titleContent.current[rowKey] = el)}\r\n            content={title.items.titles}\r\n            rowKey={rowKey}\r\n          />\r\n        )}\r\n        {description && (\r\n          <DescriptionContent\r\n            ref={(el) => (descriptionContent.current[rowKey] = el)}\r\n            content={description.items.descriptions}\r\n            rowKey={rowKey}\r\n          />\r\n        )}\r\n        {button && (\r\n          <ButtonContent\r\n            ref={(el) => (buttonContent.current[rowKey] = el)}\r\n            rowKey={rowKey}\r\n          />\r\n        )}\r\n        {image && (\r\n          <ImageContent\r\n            ref={(el) => (imageContent.current[rowKey] = el)}\r\n            rowKey={rowKey}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className=\"widget-content basic-col\">\r\n      <h2 className=\"regular24\">Widget content</h2>\r\n      {rows.map((row) => (\r\n        <Collapse\r\n          style={{ backgroundColor: \"#fff\" }}\r\n          key={row.key}\r\n          items={[\r\n            {\r\n              key: row.key,\r\n              label: row.title,\r\n              children: renderContent(row.key),\r\n              extra: <RemoveButton rowKey={row.key} removeRow={removeRow} />,\r\n            },\r\n          ]}\r\n        />\r\n      ))}\r\n\r\n      <Button color=\"default\" variant=\"outlined\" onClick={handleAddRow}>\r\n        Add item\r\n      </Button>\r\n    </section>\r\n  );\r\n});\r\n\r\nexport default WidgetContent;\r\n","import { Helmet } from \"react-helmet-async\";\r\nimport { useRef, useState } from \"react\";\r\nimport WidgetContent from \"../../../components/widgets/static-widget-generator/WidgetContent\";\r\nimport { ShowMessage } from \"../../../utils/ShowMessage\";\r\nimport {\r\n  generateErrorMessage,\r\n  generateSuccessMessage,\r\n} from \"../../../constants/alertMessages\";\r\nimport { Button } from \"antd\";\r\nimport CodeDisplay from \"../../../components/code-display/CodeDisplay\";\r\n\r\nexport default function ExcursionPageGenerator() {\r\n  const pageTitle = \"Cards with offers\";\r\n  const widgetContentRef = useRef();\r\n  const [generatedHtml, setGeneratedHtml] = useState(\"\");\r\n  const codeDisplayRef = useRef(null);\r\n  const { contextHolder, showError, showSuccess } = ShowMessage();\r\n\r\n  const content = [\r\n    {\r\n      rowType: \"title\",\r\n      items: {\r\n        titles: [\r\n          {\r\n            type: \"p\",\r\n            class: \"\",\r\n          },\r\n          {\r\n            type: \"h2\",\r\n            class: \"\",\r\n          },\r\n          {\r\n            type: \"h3\",\r\n            class: \"\",\r\n          },\r\n          {\r\n            type: \"h4\",\r\n            class: \"\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      rowType: \"description\",\r\n      items: {\r\n        descriptions: [\r\n          {\r\n            type: \"p\",\r\n            class: \"\",\r\n          },\r\n          {\r\n            type: \"span\",\r\n            class: \"\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      rowType: \"button\",\r\n    },\r\n    {\r\n      rowType: \"image\",\r\n    },\r\n  ];\r\n\r\n  const handleSubmit = () => {\r\n    const isWidgetContentValid = widgetContentRef.current?.validate?.();\r\n    if (!isWidgetContentValid) {\r\n      showError(generateErrorMessage);\r\n      return;\r\n    }\r\n    const widgetContentValues = widgetContentRef.current?.getValues?.();\r\n    console.log(\"content\", widgetContentValues);\r\n    // const excursionPageHtml = CreateExcursionPage({\r\n    //   heroContent: heroRefValues,\r\n    //   bodyContent: bodyContentValues,\r\n    //   pagePrevNextLinkingContent: pagePrevNextLinkingValues,\r\n    // });\r\n    // setGeneratedHtml(excursionPageHtml);\r\n    // setTimeout(() => {\r\n    //   codeDisplayRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    // }, 100);\r\n    showSuccess(generateSuccessMessage);\r\n  };\r\n  return (\r\n    <>\r\n      {contextHolder}\r\n      <Helmet>\r\n        <title>{pageTitle}</title>\r\n        <meta name=\"title\" content={pageTitle} />\r\n      </Helmet>\r\n      <h1 className=\"regular28\">Cards with offers generator</h1>\r\n      <WidgetContent ref={widgetContentRef} content={content} />\r\n      <Button\r\n        onClick={handleSubmit}\r\n        type=\"primary\"\r\n        style={{ marginTop: \"20px\", width: \"100%\" }}\r\n      >\r\n        Generate cards with offers\r\n      </Button>\r\n      {generatedHtml && (\r\n        <CodeDisplay content={generatedHtml} scrollRef={codeDisplayRef} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useCallback } from \"react\";\r\n\r\nexport const useTypeChange = ({\r\n  content,\r\n  setSelectedType,\r\n  setErrors,\r\n  setClasses,\r\n}) => {\r\n  const handleTypeChange = useCallback(\r\n    (key, typeValue) => {\r\n      setSelectedType((prev) => ({ ...prev, [key]: typeValue }));\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        type: {\r\n          ...(prev.type || {}),\r\n          [key]: \"\",\r\n        },\r\n      }));\r\n\r\n      const rowClasses = content\r\n        .filter((item) => item.type === typeValue && item.class !== \"\")\r\n        .map((item) => ({\r\n          label: item.class,\r\n          value: item.class,\r\n        }));\r\n\r\n      setClasses((prev) => ({ ...prev, [key]: rowClasses }));\r\n    },\r\n    [content, setSelectedType, setErrors, setClasses]\r\n  );\r\n  return { handleTypeChange };\r\n};\r\n","export const basicSuccessMessage = \"Success!\";\r\nexport const basicErrorMessage = \"Something went wrong. Please try again.\";\r\nexport const generateSuccessMessage = \"Content generated successfully!\";\r\nexport const generateErrorMessage = \"Failed to generate content.\";\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport function useRows(initialRows = []) {\r\n  const [rows, setRows] = useState(initialRows);\r\n\r\n  const addRow = useCallback((extraData = {}) => {\r\n    setRows((prev) => [\r\n      ...prev,\r\n      {\r\n        key: prev.length,\r\n        ...extraData,\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  const removeRow = useCallback((key) => {\r\n    setRows((prev) => prev.filter((row) => row.key !== key));\r\n  }, []);\r\n\r\n  return { rows, addRow, removeRow };\r\n}\r\n"],"names":["urlRegex","useTextChange","_ref","setText","setErrors","field","handleTextChange","useCallback","key","textValue","prev","_objectSpread","text","TextArea","Input","CodeDisplay","content","scrollRef","copied","setCopied","useState","_jsxs","ref","className","id","style","marginTop","width","children","display","justifyContent","alignItems","marginBottom","_jsx","Tooltip","title","Button","icon","CopyOutlined","onClick","async","navigator","clipboard","writeText","message","success","setTimeout","err","error","type","size","value","resize","rows","readOnly","ShowMessage","messageApi","contextHolder","useMessage","showError","msg","open","showSuccess","showInfo","rowKey","removeRow","placement","DeleteOutlined","color","variant","useSetFirstType","types","selectedType","setSelectedType","handleTypeChange","useEffect","length","firstType","forwardRef","selectedClass","setSelectedClass","classes","setClasses","errors","map","item","label","useTypeChange","useImperativeHandle","validate","newError","Object","keys","getValues","values","class","trim","htmlFor","concat","Select","allowClear","options","onChange","disabled","e","target","link","setLink","handleLinkChange","test","addRow","useRows","titleContent","useRef","descriptionContent","buttonContent","imageContent","contentRefs","current","_ref$current$key","_titleContent$current","_titleContent$current2","_descriptionContent$c","_descriptionContent$c2","_buttonContent$curren","_buttonContent$curren2","_imageContent$current","_imageContent$current2","call","description","button","image","renderContent","find","c","rowType","_Fragment","TitleContent","el","items","titles","DescriptionContent","descriptions","ButtonContent","ImageContent","row","Collapse","backgroundColor","extra","RemoveButton","handleAddRow","ExcursionPageGenerator","pageTitle","widgetContentRef","generatedHtml","setGeneratedHtml","codeDisplayRef","Helmet","name","WidgetContent","handleSubmit","_widgetContentRef$cur","_widgetContentRef$cur2","_widgetContentRef$cur3","_widgetContentRef$cur4","generateErrorMessage","widgetContentValues","console","log","generateSuccessMessage","typeValue","rowClasses","filter","initialRows","arguments","undefined","setRows","extraData"],"sourceRoot":""}